# # CinescopeFork\Modul_4\PydanticExamples\test_pydantic.py
# from pydantic import BaseModel
# from venv import logger
#
# class User(BaseModel):  # –°–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞—Å—Å User —Å –ø–æ–º–æ—â—å—é BaseModel –æ—Ç pydantic –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è
#     name: str       # —á—Ç–æ –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
#     age: int        # –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
#     adult: bool     # –ø–æ–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–æ–ª–µ—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
#
#
# def get_user():     # —Ñ—É–Ω–∫—Ü–∏—è get_user –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç dict —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
#     return {
#         "name": "Alice",
#         "age": 25,
#         "adult": "true"
#         }
#
# def test_user_data():
#     user = User(**get_user())       # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Pydantic
#     assert user.name == "Alice"     # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
#     logger.info(f"{user.name=} {user.age=} {user.adult=}")      # –∞ —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–æ–±–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
#     print(user)
"""
–í —ç—Ç–æ–º –∫–æ–¥–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Pydantic –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º –µ–≥–æ –ø–æ—à–∞–≥–æ–≤–æ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è Python.

1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Pydantic
from pydantic import BaseModel

class User(BaseModel):
    name: str       # –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
    age: int        # –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
    adult: bool     # –ü–æ–ª–µ "—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    
### –ß—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?

- `class User(BaseModel)`:
    - –ú—ã —Å–æ–∑–¥–∞–µ–º **–∫–ª–∞—Å—Å** `User`, –∫–æ—Ç–æ—Ä—ã–π **–Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è** –æ—Ç `BaseModel` –∏–∑ Pydantic
    - `BaseModel` –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤ `name: str, age: int, adult: bool`:
    - –≠—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç Python (–∏ Pydantic), —á—Ç–æ `name` –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, `age` ‚Äì —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –∞ `adult` ‚Äì –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (`True` –∏–ª–∏ `False`).
    - **Pydantic —Å–∞–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã**, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ!
    
### **2. –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è**

```python
def get_user():
    return {
        "name": "Alice",
        "age": 25,
        "adult": "true"
    }
```
### –ß—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?

- –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç **—Å–ª–æ–≤–∞—Ä—å (`dict`)** —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- **–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ** –Ω–∞ `"adult": "true"` ‚Äì —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∞ –Ω–µ `True` (–±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ).
- –ü–æ –ø—Ä–∞–≤–∏–ª–∞–º `User`, `adult` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å `bool`, –Ω–æ –ø–µ—Ä–µ–¥–∞–Ω **–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π** —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.

üí° **Pydantic –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç —ç—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞!**

3. –ò—Å–ø–æ–ª—å–∑—É–µ–º Pydantic –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def test_user_data():
    user = User(**get_user())  # –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª—å Pydantic


–ß—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?

User(**get_user()) ‚Äì —Å–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ User.
**get_user() ‚Äì —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏ –ø–µ—Ä–µ–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ User:
User(name="Alice", age=25, adult="true")

### **4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö**

```python
    assert user.name == "Alice"
```

- –≠—Ç–æ –æ–±—ã—á–Ω—ã–π `assert`, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ `user.name` –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ `"Alice"`.
- –ï—Å–ª–∏ –±—ã –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, `Pydantic` –≤—ã–±—Ä–æ—Å–∏–ª –±—ã –æ—à–∏–±–∫—É **–µ—â—ë –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞**.


### **5. –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ**

```python
    logger.info(f"{user.name=} {user.age=} {user.adult=}")
```

### –ß—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?

- `f"{user.name=} {user.age=} {user.adult=}"` ‚Äì —ç—Ç–æ **f-—Å—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö**.
- –í—ã–≤–µ–¥–µ—Ç:
    
    ```
    user.name='Alice' user.age=25 user.adult=True
    
    ```
    
- **–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, —á—Ç–æ Pydantic –∏—Å–ø—Ä–∞–≤–∏–ª "true" ‚Üí `True`.**

## **–í—ã–≤–æ–¥: –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**

1. **–û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö** —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ç–∏–ø–∞–º–∏ (`BaseModel`).
2. **–ü–µ—Ä–µ–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –≤ Pydantic**, –∫–æ—Ç–æ—Ä—ã–π **–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç** –¥–∞–Ω–Ω—ã–µ.
3. **–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, Pydantic –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É**.
4. **–í –∏—Ç–æ–≥–µ —É –Ω–∞—Å —á–∏—Å—Ç—ã–µ, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç–µ `User`**.

### **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã: –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è**

### **–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–¥–∞—ë–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø**

user = User(name="Alice", age="–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å", adult="–¥–∞")

üö´**–û—à–∏–±–∫–∞!**

```
pydantic_core._pydantic_core.ValidationError:
1 validation error for User
age
  Input should be a valid integer, but got str
```

**Pydantic –Ω–µ —Å–º–æ–≥ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å `"–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å"` –≤ —á–∏—Å–ª–æ –∏ –≤—ã–±—Ä–æ—Å–∏–ª –æ—à–∏–±–∫—É.**

‚úÖ Pydantic —Å–∞–º –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∏–ø—ã, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
user = User(name="Alice", age="25", adult="true")
print(user)

Pydantic –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç "25" –≤ 25, –∞ "true" –≤ True!
User(name='Alice', age=25, adult=True)

## **–ü–æ—á–µ–º—É —ç—Ç–æ —É–¥–æ–±–Ω–æ –≤ —Ç–µ—Å—Ç–∞—Ö?**

- **–ù–µ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–∏–ø—ã** ‚Äì Pydantic –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
- **–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è API-–æ—Ç–≤–µ—Ç–æ–≤**:
    - –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª JSON, **–º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –æ–±—ä–µ–∫—Ç**.
- **–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ç–µ—Å—Ç—ã –Ω–µ —Å–ª–æ–º–∞—é—Ç—Å—è –∏–∑-–∑–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö**.

üí° **–í–º–µ—Å—Ç–æ –∫—É—á–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å `assert` –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—Ç—å Pydantic-–º–æ–¥–µ–ª—å –∏ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ!**

–ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Pydantic
BaseModel - –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö. –ú–æ–¥–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∞–≤–∏–ª–∞ –∏—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏. 
Field -  –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª–µ–π –º–æ–¥–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–¥. (https://docs.pydantic.dev/latest/concepts/fields/) –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
Optional  –∏ Default -  –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
Enum  - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Enum –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
Pydantic –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –≤ JSON –∏ –æ–±—Ä–∞—Ç–Ω–æ.
–ü—Ä–∏–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∞ Product –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
# CinescopeFork\Modul_4\PydanticExamples\test_pydantic.py
from typing import Optional
from pydantic import BaseModel, Field
from enum import Enum
from venv import logger

class ProductType(str, Enum): 
    NEW = "new"
    PREVIOUS_USE = "previous_use"

class Manufacturer(BaseModel):
    name: str
    city: Optional[str] = None
    street: Optional[str] = None
    
class Product(BaseModel):
		# –ø–æ–ª–µ name –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥–ª–∏–Ω—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
    name: str = Field(..., min_length=3, max_length=50, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
    # –ø–æ–ª–µ price –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0
    price: float = Field(..., gt=0, description="–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞")
    # –ø–æ–ª–µ in_stock –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = False
    in_stock: bool = Field(default=False, description="–ï—Å—Ç—å –ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏")
    # –ø–æ–ª–µ color–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "black" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    color: str = "black"  
    # –ø–æ–ª–µ year –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ. –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—å–µ–∫—Ç–∞
    year: Optional[int] = None
    # –ø–æ–ª–µ product –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–∏–ø Enum (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –∏–∑ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π)
    product: ProductType
    # –ø–æ–ª–µ manufacturer –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–∏–ø –¥—Ä—É–≥–æ–π BaseModel
    manufacturer: Manufacturer

def test_product():
    # –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—å–µ–∫—Ç–∞ + –≤ –ø–æ–ª–µ price –ø–µ—Ä–µ–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
    product = Product(name="Laptop", price="999.99", product=ProductType.NEW, manufacturer=Manufacturer(name="MSI"))
    logger.info(f"{product=}")
    # Output: product=Product(name='Laptop', price=999.99, in_stock=False, color='black', year=None, product=<ProductType.NEW: 'new'>, manufacturer=Manufacturer(name='MSI', city=None, street=None))

    # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±—å–µ–∫—Ç–∞ –≤ json
    json_data = product.model_dump_json(exclude_unset=True)
    logger.info(f"{json_data=}")
    # Output: json_data='{"name":"Laptop","price":999.99,"product":"new","manufacturer":{"name":"MSI"}}'

    # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ json –≤ –æ–±—å–µ–∫—Ç
    new_product = Product.model_validate_json(json_data)
    logger.info(f"{new_product=}")
    # Output: new_product=Product(name='Laptop', price=999.99, in_stock=False, color='black', year=None, product=<ProductType.NEW: 'new'>, manufacturer=Manufacturer(name='MSI', city=None, street=None))

Pydantic –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.
# –í –ø–æ–ª–µ price –ø–µ—Ä–µ–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
product = Product(name="Laptop", price="999.99", product=ProductType.NEW, manufacturer=Manufacturer(name="MSI"))

–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Pydantic
–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã Pydantic –∏ –∫–∞–∫ –æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏. 
Pydantic –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ –±–æ–ª–µ–µ —á–∏—Å—Ç—ã–º, –Ω–∞–¥–µ–∂–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.

1. BaseModel ‚Äî –æ—Å–Ω–æ–≤–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –≤ Pydantic
from pydantic import BaseModel

class Product(BaseModel):
    name: str
    price: float
    
**–ß—Ç–æ –¥–µ–ª–∞–µ—Ç `BaseModel`?**

- **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ** –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞.
- **–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø—ã** (–Ω–∞–ø—Ä–∏–º–µ—Ä, `"999.99"` ‚Üí `999.99`).
- **–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å** –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ JSON).

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
product = Product(name="Laptop", price="999.99")
print(product)
# Product(name='Laptop', price=999.99)

- **Pydantic –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª —Å—Ç—Ä–æ–∫—É `"999.99"` –≤ `float`!**
- –ï—Å–ª–∏ –±—ã –≤–º–µ—Å—Ç–æ —Ü–µ–Ω—ã –ø–µ—Ä–µ–¥–∞–ª–∏ `"—Å—Ç–æ –¥–æ–ª–ª–∞—Ä–æ–≤"`, **Pydantic –≤—ã–±—Ä–æ—Å–∏–ª –±—ã –æ—à–∏–±–∫—É**.

### **2. `Field` ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π**

üí°`Field` –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å **–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è** –¥–ª—è –ø–æ–ª–µ–π.

```python
from pydantic import BaseModel, Field

class Product(BaseModel):
    name: str = Field(..., min_length=3, max_length=50, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
    price: float = Field(..., gt=0, description="–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞")

```
‚ùì**–ß—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?**

- `min_length=3, max_length=50` ‚Äî –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.
- `gt=0` ‚Äî —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å **–±–æ–ª—å—à–µ 0**.
- `description="..."` ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤ **JSON Schema**.

### –≠–ª–ª–∏–ø—Å–∏—Å –∏–ª–∏ `‚Ä¶`

–í Pydantic —Å–∏–º–≤–æ–ª **`...`** (—ç–ª–ª–∏–ø—Å–∏—Å) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π. –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ Python, –∫–æ—Ç–æ—Ä—ã–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Pydantic —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–æ–ª–µ **–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ** –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–¥–µ–ª–∏

### **–†–∞–∑–±–µ—Ä–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ:**

1. **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç `...`?**
    - **`...`** ‚Äî —ç—Ç–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ **`Ellipsis`**, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º –≤ Python
    - –í Pydantic –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª–µ —è–≤–ª—è–µ—Ç—Å—è **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º** (—Ç.–µ. –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–¥–µ–ª–∏)
2. **–ó–∞—á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `...` –≤–º–µ—Å—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?**
    - –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª–µ –±—ã–ª–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º, –Ω–æ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –¥–ª—è –Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ **`...`**.
    - –ù–∞–ø—Ä–∏–º–µ—Ä:–ó–¥–µ—Å—å **`name`** ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–¥–µ–ª–∏ **`Product`** –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è **`name`**
        
        ```python
        name: str = Field(..., min_length=3)
        ```
        
3. **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**
    - –ö–æ–≥–¥–∞ Pydantic –≤–∏–¥–∏—Ç **`...`** –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è –±—ã–ª–æ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–¥–µ–ª–∏
    - –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, Pydantic –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
4. **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
    
    ```python
    from pydantic import BaseModel, Field
    
    class Product(BaseModel):
    name: str = Field(..., min_length=3, max_length=50, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
    price: float = Field(..., gt=0, description="–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É
    try:
    product = Product()
    except Exception as e:
    print(e)  # Output: "field required" –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª–µ–π
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    product = Product(name="Laptop", price=1000.0)
    
    print(product)
    
    # Output: name='Laptop' price=1000.0
    ```
    
5. **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ `...`:**
    - –ï—Å–ª–∏ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        
        –ó–¥–µ—Å—å –ø–æ–ª–µ **`name`** –±—É–¥–µ—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º, –∏ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –æ–Ω–æ –ø—Ä–∏–º–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ **`"Unknown"`**
        
        ```python
        name: str = Field(default="Unknown", min_length=3)
        ```
        
6. **–ü–æ—á–µ–º—É –Ω–µ –ø—Ä–æ—Å—Ç–æ `None`?**
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ **`None`** –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ–ª–∞–µ—Ç –ø–æ–ª–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –µ–º—É –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ **`None`**. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª–µ –±—ã–ª–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º, –Ω–æ –Ω–µ –∏–º–µ–ª–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, **`...`** ‚Äî —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä

### **–ü—Ä–∏–º–µ—Ä —Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º:**

```python
class Product(BaseModel):
name: str = Field(..., min_length=3)  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
price: float = Field(default=0.0, ge=0)  # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
```

### **–ü–æ–¥—ã—Ç–æ–∂–∏–º:**

- **`...`** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ Pydantic
- –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, **`None`** –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)

### **3. `Optional` –∏ `Default` ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è**
üí°

–ï—Å–ª–∏ –ø–æ–ª–µ **–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å**, –∏—Å–ø–æ–ª—å–∑—É–µ–º **`Optional`**.


```python
from typing import Optional

class Product(BaseModel):
    name: str
    year: Optional[int] = None  # –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
```

- **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
    
    ```python
    p1 = Product(name="Phone")
    p2 = Product(name="Phone", year=2022)
    
    ```
     ‚ûñ
    
    - **`p1` —Å–æ–∑–¥–∞—Å—Ç—Å—è –±–µ–∑ `year`, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ `None` –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.**
    - **`p2` —Å–æ–∑–¥–∞—Å—Ç—Å—è —Å `year=2022`.**
   
### **4. `Enum` ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π**

üí°`Enum` –ø–æ–º–æ–≥–∞–µ—Ç **–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è**.

```python
from enum import Enum

class ProductType(str, Enum):
    NEW = "new"
    USED = "used"
```

- **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –º–æ–¥–µ–ª–∏:**
    
    ```python
    class Product(BaseModel):
        name: str
        product_type: ProductType
    ```
üí°  **–¢–µ–ø–µ—Ä—å `product_type` –º–æ–∂–µ—Ç –±—ã—Ç—å –¢–û–õ–¨–ö–û `"new"` –∏–ª–∏ `"used"`.**

### **5. –í–ª–æ–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏**

<aside>
üí°

–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **–¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏** –∫–∞–∫ —Ç–∏–ø—ã –ø–æ–ª–µ–π.

</aside>

```python
class Manufacturer(BaseModel):
    name: str
    city: Optional[str] = None

class Product(BaseModel):
    name: str
    manufacturer: Manufacturer  # üëà –í–ª–æ–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å

```

- **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è :**
    
    ```python
    product = Product(name="Phone", manufacturer={"name": "Samsung"})
    print(product)
    # Product(name='Phone', manufacturer=Manufacturer(name='Samsung', city=None))
    
    ```
    
    <aside>
    üí°
    
    **Pydantic –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–ª `Manufacturer` –∏–∑ —Å–ª–æ–≤–∞—Ä—è!**

### **6. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JSON**

<aside>
üí°

Pydantic —É–º–µ–µ—Ç **–ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –≤ JSON**.

</aside>

```python
product = Product(name="Laptop", price=999.99)
json_data = product.model_dump_json(exclude_unset=True)
print(json_data)
# '{"name": "Laptop", "price": 999.99}'
```

<aside>
‚ùì

**–ß—Ç–æ –¥–µ–ª–∞–µ—Ç `model_dump_json(exclude_unset=True)`?**

- **–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É JSON**.
- **–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º `None`** (—á—Ç–æ–±—ã JSON –±—ã–ª –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º).

### **7. –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–∏–∑ JSON –≤ –æ–±—ä–µ–∫—Ç)**

<aside>
üí°

–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç **–∏–∑ JSON**.

</aside>

```python
new_product = Product.model_validate_json(json_data)
print(new_product)
# Product(name='Laptop', price=999.99)

```

‚ûñ

**Pydantic —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç JSON –∏ —Å–æ–∑–¥–∞—Å—Ç –æ–±—ä–µ–∫—Ç.**

### **8. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö**

<aside>
üí°

**Pydantic —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—Å–µ –ø–æ–ª—è.**

</aside>

```python
try:
    p = Product(name="TV", price="–±–µ—Å–ø–ª–∞—Ç–Ω–æ")
except Exception as e:
    print(e)

```

<aside>
üö´

**–û—à–∏–±–∫–∞! `"–±–µ—Å–ø–ª–∞—Ç–Ω–æ"` –Ω–µ–ª—å–∑—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ.**

</aside>
"""
import json

import pytest
# CinescopeFork\Modul_4\PydanticExamples\test_pydantic.py
from pydantic import BaseModel, Field, field_validator
from venv import logger
from typing import List, Optional
from ..enums.roles import Roles
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ModelForTestUser(BaseModel): # –°–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞—Å—Å ModelForTestUser —Å –ø–æ–º–æ—â—å—é BaseModel –æ—Ç pydantic –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è
    email: str     # –í–∞–ª–∏–¥–∞—Ü–∏—è email-–∞–¥—Ä–µ—Å–∞
    fullName: str = Field(..., min_length=1)        # –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    password: str = Field(..., min_length=8, max_length=20)         # –ü–∞—Ä–æ–ª—å: –º–∏–Ω–∏–º—É–º 8, –º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤
    passwordRepeat: str = Field(..., min_length=8, max_length=20)   # –ü–∞—Ä–æ–ª—å: –º–∏–Ω–∏–º—É–º 8, –º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤
    roles: List[Roles]   # –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["USER"])
    banned: Optional[bool] = False
    verified: Optional[bool] = True

    @field_validator("email")
    def check_email(value :str) -> str:
        if "@" not in value:
            raise ValueError("email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @")
        return value

    @field_validator("password")
    def check_password(value :str) -> str:
        if len(value) < 8:
            raise ValueError("–ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
        return value


class TestModelForTestUser:

    def test_validate_test_user(self, test_user):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã test_user –≤–∞–ª–∏–¥–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å ModelForTestUser."""
        user = ModelForTestUser(**test_user)

        assert user.email == test_user["email"], f"email –∞–¥—Ä–µ—Å–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
        assert user.fullName == test_user["fullName"], f"fullName –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        assert user.password == test_user["password"], f"password –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        assert user.passwordRepeat == test_user["passwordRepeat"], f"passwordRepeat –Ω–µ —Ä–∞–≤–µ–Ω password"
        assert user.roles == [Roles.USER], f"–†–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        assert user.banned == False, f"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏  banned = True"
        assert user.verified == True, f"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏  verified == False"


    def test_validate_creation_user_data(self, creation_user_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã creation_user_data –≤–∞–ª–∏–¥–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å ModelForTestUser."""
        user = ModelForTestUser(**creation_user_data)

        assert user.email == creation_user_data["email"], f"email –∞–¥—Ä–µ—Å–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
        assert user.fullName == creation_user_data["fullName"], f"fullName –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        assert user.password == creation_user_data["password"], f"password –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        assert user.passwordRepeat == creation_user_data["passwordRepeat"], f"passwordRepeat –Ω–µ —Ä–∞–≤–µ–Ω password"
        assert user.roles == [Roles.USER], f"–†–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        assert user.banned == False, f"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏  banned = True"
        assert user.verified == True, f"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏  verified == False"

    def test_json_serialization(self, test_user, creation_user_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü—é —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å ModelForTestUser."""
        user1 = ModelForTestUser(**test_user)
        user2 = ModelForTestUser(**creation_user_data)

        user1_json = user1.json(exclude_unset=True)
        user2_json = user2.json()

        user1_dict = json.loads(user1_json)
        user2_dict = json.loads(user2_json)

        logger.info(f"JSON for test_user (exclude_unset=True): {user1_json}")
        logger.info(f"JSON for creation_user_data: {user2_json}")

        assert "banned" not in user1_dict, f"banned –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ"
        assert "verified" not in user1_dict, f"verified –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ"

        assert "banned" in user2_dict, f"banned –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ"
        assert user2_dict["banned"] == False, f"banned = True, —Ö–æ—Ç—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False"
        assert "verified" in user2_dict, f"verified –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ"
        assert user2_dict["verified"] == True, f"verified = False, —Ö–æ—Ç—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True"

    def test_invalid_email_no_at(self):

        invalid_data = {
            "email": "userexample.com",
            "fullName": "John Doe",
            "password": "Pass123!",
            "passwordRepeat": "Pass123!",
            "roles": ["USER"]
        }
        with pytest.raises(ValueError, match="email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @"):
            example = ModelForTestUser(**invalid_data)
