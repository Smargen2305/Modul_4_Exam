from enum import Enum

class Roles(Enum):
    USER = "USER"
    ADMIN = "ADMIN"
    SUPER_ADMIN = "SUPER_ADMIN"

"""
В Python `Enum` (перечисление) — это специальный класс, который позволяет **определять набор именованных констант**. 
Это полезно, когда нужно создать **фиксированный список значений**, в нашем случае это роли пользователей

Как работает `Enum`?

1. **Наследуемся от `Enum`**, чтобы создать перечисление
2. **Определяем константы**
3. **Каждой константе присваивается строковое значение**, которое можно использовать в коде
"""
"""
> Разбор кода:
> 1️⃣ **`class Roles(Enum):`**

> - Создаёт новый класс, наследуемый от `Enum`.
> - `Roles` становится перечислением, внутри которого хранятся фиксированные роли.
> 
> 2️⃣ **`USER = "USER"` и другие роли**
> 
> - Каждая переменная внутри `Enum` — это экземпляр класса `Roles`
> - Значение `USER = "USER"` означает, что `Roles.USER.value` вернёт строку `"USER"`.
> 
> 3️⃣ **Доступ к значениям**
> 
> - Можно обращаться к роли как `Roles.ADMIN`, а её значение получить через `Roles.ADMIN.value`
> - Можно перебирать все роли в `Roles` с помощью `list(Roles)`
"""
"""
Примеры использования:
1. Получение значения роли:
print(Roles.ADMIN.value)  # Выведет: "ADMIN"

2. Сравнение ролей:
user_role = "ADMIN"

if user_role == Roles.ADMIN.value:
    print("Пользователь — администратор!")

3. Перебор всех ролей:
for role in Roles:
    print(role.name, "->", role.value)

# Вывод:
# USER -> USER
# ADMIN -> ADMIN
# SUPER_ADMIN -> SUPER_ADMIN
"""